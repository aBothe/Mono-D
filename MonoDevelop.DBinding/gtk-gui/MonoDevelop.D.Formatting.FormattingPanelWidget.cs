
// This file has been generated by the GUI designer. Do not modify.
namespace MonoDevelop.D.Formatting
{
	public partial class FormattingPanelWidget
	{
		private global::Gtk.Table table1;
		
		private global::Gtk.CheckButton check_IndentPastedCodeLines;
		
		private global::Gtk.CheckButton check_KeepAlignmentSpaces;
		
		private global::Gtk.CheckButton chk_CommentOutStdHeaders;
		
		private global::Gtk.CheckButton chk_InsertStarAtCommentNewLine;

		protected virtual void Build ()
		{
			global::Stetic.Gui.Initialize (this);
			// Widget MonoDevelop.D.Formatting.FormattingPanelWidget
			global::Stetic.BinContainer.Attach (this);
			this.Name = "MonoDevelop.D.Formatting.FormattingPanelWidget";
			// Container child MonoDevelop.D.Formatting.FormattingPanelWidget.Gtk.Container+ContainerChild
			this.table1 = new global::Gtk.Table (((uint)(5)), ((uint)(2)), false);
			this.table1.Name = "table1";
			this.table1.RowSpacing = ((uint)(6));
			this.table1.ColumnSpacing = ((uint)(6));
			// Container child table1.Gtk.Table+TableChild
			this.check_IndentPastedCodeLines = new global::Gtk.CheckButton ();
			this.check_IndentPastedCodeLines.CanFocus = true;
			this.check_IndentPastedCodeLines.Name = "check_IndentPastedCodeLines";
			this.check_IndentPastedCodeLines.Label = global::MonoDevelop.Core.GettextCatalog.GetString ("Automatically indent pasted code lines");
			this.check_IndentPastedCodeLines.DrawIndicator = true;
			this.check_IndentPastedCodeLines.UseUnderline = true;
			this.table1.Add (this.check_IndentPastedCodeLines);
			global::Gtk.Table.TableChild w1 = ((global::Gtk.Table.TableChild)(this.table1 [this.check_IndentPastedCodeLines]));
			w1.TopAttach = ((uint)(3));
			w1.BottomAttach = ((uint)(4));
			w1.LeftAttach = ((uint)(1));
			w1.RightAttach = ((uint)(2));
			w1.YOptions = ((global::Gtk.AttachOptions)(4));
			// Container child table1.Gtk.Table+TableChild
			this.check_KeepAlignmentSpaces = new global::Gtk.CheckButton ();
			global::Gtk.Tooltips w2 = new Gtk.Tooltips ();
			w2.SetTip (this.check_KeepAlignmentSpaces, "If unchecked, spaces that are not used for indentation but for final code alignment will be converted to tabs, too.", "If unchecked, spaces that are not used for indentation but for final code alignment will be converted to tabs, too.");
			this.check_KeepAlignmentSpaces.CanFocus = true;
			this.check_KeepAlignmentSpaces.Name = "check_KeepAlignmentSpaces";
			this.check_KeepAlignmentSpaces.Label = global::MonoDevelop.Core.GettextCatalog.GetString ("Keep spaces for code aligment");
			this.check_KeepAlignmentSpaces.DrawIndicator = true;
			this.check_KeepAlignmentSpaces.UseUnderline = true;
			this.table1.Add (this.check_KeepAlignmentSpaces);
			global::Gtk.Table.TableChild w3 = ((global::Gtk.Table.TableChild)(this.table1 [this.check_KeepAlignmentSpaces]));
			w3.TopAttach = ((uint)(2));
			w3.BottomAttach = ((uint)(3));
			w3.LeftAttach = ((uint)(1));
			w3.RightAttach = ((uint)(2));
			w3.YOptions = ((global::Gtk.AttachOptions)(4));
			// Container child table1.Gtk.Table+TableChild
			this.chk_CommentOutStdHeaders = new global::Gtk.CheckButton ();
			this.chk_CommentOutStdHeaders.CanFocus = true;
			this.chk_CommentOutStdHeaders.Name = "chk_CommentOutStdHeaders";
			this.chk_CommentOutStdHeaders.Label = global::MonoDevelop.Core.GettextCatalog.GetString ("Comment out standard header");
			this.chk_CommentOutStdHeaders.DrawIndicator = true;
			this.chk_CommentOutStdHeaders.UseUnderline = true;
			this.table1.Add (this.chk_CommentOutStdHeaders);
			global::Gtk.Table.TableChild w4 = ((global::Gtk.Table.TableChild)(this.table1 [this.chk_CommentOutStdHeaders]));
			w4.LeftAttach = ((uint)(1));
			w4.RightAttach = ((uint)(2));
			w4.YOptions = ((global::Gtk.AttachOptions)(4));
			// Container child table1.Gtk.Table+TableChild
			this.chk_InsertStarAtCommentNewLine = new global::Gtk.CheckButton ();
			this.chk_InsertStarAtCommentNewLine.CanFocus = true;
			this.chk_InsertStarAtCommentNewLine.Name = "chk_InsertStarAtCommentNewLine";
			this.chk_InsertStarAtCommentNewLine.Label = global::MonoDevelop.Core.GettextCatalog.GetString ("Insert * or + at comment new line");
			this.chk_InsertStarAtCommentNewLine.DrawIndicator = true;
			this.chk_InsertStarAtCommentNewLine.UseUnderline = true;
			this.table1.Add (this.chk_InsertStarAtCommentNewLine);
			global::Gtk.Table.TableChild w5 = ((global::Gtk.Table.TableChild)(this.table1 [this.chk_InsertStarAtCommentNewLine]));
			w5.TopAttach = ((uint)(1));
			w5.BottomAttach = ((uint)(2));
			w5.LeftAttach = ((uint)(1));
			w5.RightAttach = ((uint)(2));
			w5.YOptions = ((global::Gtk.AttachOptions)(4));
			this.Add (this.table1);
			if ((this.Child != null)) {
				this.Child.ShowAll ();
			}
			this.Hide ();
		}
	}
}
